# https://taskfile.dev/

version: '3'
vars:
  OPSLEVEL_GO_PKG: "github.com/opslevel/opslevel-go/v2024"
  SRC_DIR: "{{.TASKFILE_DIR}}/.."

tasks:
  fix:
    desc: Fix formatting, linting, go.mod, and update submodule
    dir: "{{.SRC_DIR}}"
    cmds:
      - task: update-opslevel-go
      - go get -u
      - gofumpt -w .
      - go mod tidy
      - golangci-lint run --fix
      - nilaway -fix -test=false ./...

  lint:
    desc: Formatting and linting
    dir: "{{.SRC_DIR}}"
    deps: [install-gofumpt, install-golangci-lint, install-nilaway]
    cmds:
      - test -z "$(gofumpt -d -e . | tee /dev/stderr)"
      - golangci-lint run
      - nilaway -test=false ./...

  setup:
    desc: Setup all necessary tools and submodule for local development
    cmds:
      - cmd: echo "Installing Go dev tools..."
        silent: true
      - task: install-changie
      - task: install-nilaway
      - task: install-gofumpt
      - task: install-golangci-lint
      - task: workspace
      - cmd: echo "Go dev tools installed!"
        silent: true

  test:
    desc: Run tests
    dir: "{{.SRC_DIR}}"
    cmds:
      - go test -race -coverprofile=coverage.txt -covermode=atomic -v ./... {{ .CLI_ARGS }}

  workspace:
    desc: Setup workspace for terraform-provider-opslevel & opslevel-go development
    dir: "{{.SRC_DIR}}"
    cmds:
      - cmd: echo "Setting up opslevel-go workspace..."
        silent: true
      - git submodule update --init --remote
      - go work init || true
      - go work use . submodules/opslevel-go
      - cmd: echo "opslevel-go workspace ready!"
        silent: true

  ########################################
  # internal (not directly called) tasks #
  ########################################

  go-install-tool:
    desc: go install '{{.GO_TOOL}}' and set GOBIN if not set
    dir: "{{.SRC_DIR}}"
    internal: true
    silent: true
    vars:
      IS_TOOL_INSTALLED:
        sh: which {{.GO_TOOL}} > /dev/null || echo "1"
    cmds:
      - test -z "{{.IS_TOOL_INSTALLED}}" || echo "Installing {{.GO_TOOL}}..."
      - test -z "{{.IS_TOOL_INSTALLED}}" || go install {{.GO_TOOL_PATH}}
      - test -n $(go env GOBIN) || go env -w GOBIN=$(go env GOPATH)/bin
      - echo "  '{{.GO_TOOL}}' is installed."
    requires:
      vars: [GO_TOOL, GO_TOOL_PATH]

  has-latest-opslevel-go:
    desc: Check if latest release of opslevel-go in go.mod
    internal: true
    dir: "{{.SRC_DIR}}"
    silent: true
    vars:
      GO_WORK: "go.work"
      TMP_GO_WORK: "tmp_go.work"
      LATEST_OPSLEVEL_GO_VERSION:
        sh: go list -u -m -versions github.com/opslevel/opslevel-go/v2024 | awk '{print $NF}'
    cmds:
      - if [[ -f {{.GO_WORK}} ]]; then mv {{.GO_WORK}} {{.TMP_GO_WORK}}; fi
      - defer: if [[ -f {{.TMP_GO_WORK}} ]]; then mv {{.TMP_GO_WORK}} {{.GO_WORK}}; fi
      - |-
        if [[ {{.LATEST_OPSLEVEL_GO_VERSION}} == $(go list -m --json '{{.OPSLEVEL_GO_PKG}}' | jq -r '.Version') ]]; then
          echo "Using latest version of opslevel-go - {{.LATEST_OPSLEVEL_GO_VERSION}}";
        else
          echo "WARNING: current version of opslevel-go is behind '{{.LATEST_OPSLEVEL_GO_VERSION}}'"
          echo "Run 'task fix' to get latest version"
          exit 1
        fi

  install-changie:
    desc: go install "changie"
    internal: true
    cmds:
      - task: go-install-tool
        vars: { GO_TOOL: "changie", GO_TOOL_PATH: "github.com/miniscruff/changie@latest" }

  install-gofumpt:
    desc: go install "gofumpt"
    internal: true
    cmds:
      - task: go-install-tool
        vars: { GO_TOOL: "gofumpt", GO_TOOL_PATH: "mvdan.cc/gofumpt@latest" }

  install-golangci-lint:
    desc: go install "golangci-lint"
    internal: true
    cmds:
      - task: go-install-tool
        vars: { GO_TOOL: "golangci-lint", GO_TOOL_PATH: "github.com/golangci/golangci-lint/cmd/golangci-lint@latest" }

  install-nilaway:
    desc: go install "nilaway"
    internal: true
    cmds:
      - task: go-install-tool
        vars: { GO_TOOL: "nilaway", GO_TOOL_PATH: "go.uber.org/nilaway/cmd/nilaway@latest" }

  update-opslevel-go:
    internal: true
    desc: Update opslevel-go version to latest release
    dir: "{{.SRC_DIR}}"
    cmds:
      - go get -u "{{.OPSLEVEL_GO_PKG}}"
