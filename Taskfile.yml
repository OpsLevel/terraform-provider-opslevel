# https://taskfile.dev/

version: '3'
includes:
  go:
    internal: true
    taskfile: "./opslevel/Taskfile.yml"
vars:
  # 'VERSION_DYNAMIC' needs to run in this scope before 'task terraform-build' begins
  VERSION_DYNAMIC:
    sh: echo "$(date +%s).0.0"
  WORKSPACE_DIR: "{{.ROOT_DIR}}/workspace"

tasks:
  ci:
    desc: Workflow to run in CI
    deps:
      - brew-install-jq
      - go:install-nilaway
      - go:install-gofumpt
      - go:install-golangci-lint
    cmds:
      - task: go:has-latest-opslevel-go
      - task: lint
      - task: test

  fix:
    desc: Fix formatting, linting, go.mod, and update submodule
    cmds:
      - task: go:fix

  lint:
    desc: Formatting and linting
    cmds:
      - task: go:lint
      - task: terraform-validate
      - task: terraform-format-check

  setup:
    desc: Setup all necessary tools and submodule for local development
    cmds:
      - cmd: echo "Installing all dev tools..."
        silent: true
      - task: brew-install-jq
      - task: go:setup
      - task: setup-terraform
      - cmd: echo "All dev tools installed!"
        silent: true

  test:
    desc: Run tests
    env:
      TF_ACC: true
    cmds:
      - task: go:test

  terraform-apply:
    desc: Rebuild and run "terraform apply -auto-approve" in "{{.WORKSPACE_DIR}}"
    aliases: ["apply"]
    cmds:
      - task: setup-terraform
      - task: terraform-command
        vars: { TF_COMMAND: "apply -auto-approve", TF_CMD_DIR: "{{.WORKSPACE_DIR}}" }

  terraform-build:
    desc: Build local opslevel terraform provider
    dir: "{{.ROOT_DIR}}"
    aliases: ["build"]
    platforms: [darwin]
    vars:
      BINARY: terraform-provider-opslevel_{{.VERSION_DYNAMIC}}
      LOCATION: "${HOME}/.terraform.d/plugins/registry.terraform.io/opslevel/opslevel/{{.VERSION_DYNAMIC}}/{{OS}}_{{ARCH}}"
    cmds:
      - go build -ldflags="-s -w -X github.com/opslevel/terraform-provider-opslevel/opslevel.version={{.VERSION_DYNAMIC}}" -o {{.BINARY}} || exit 1
      - chmod +x {{.BINARY}}
      - mkdir -p {{.LOCATION}}
      - mv {{.BINARY}} {{.LOCATION}}/{{.BINARY}}

  terraform-clean:
    desc: Completely wipe terraform state and all terraform generated files from "{{.WORKSPACE_DIR}}"
    aliases: ["clean"]
    dir: "{{.WORKSPACE_DIR}}"
    prompt: Remove '*.tfstate .terraform.lock.hcl ./terraform.* .terraform/**' from '{{.WORKSPACE_DIR}}' directory?
    cmds:
      - cmd: rm -rf *.tfstate .terraform.lock.hcl ./terraform.* .terraform/
        ignore_error: true

  terraform-destroy:
    desc: Rebuild and run "terraform destroy -auto-approve" in "{{.WORKSPACE_DIR}}"
    aliases: ["destroy"]
    cmds:
      - task: setup-terraform
      - task: terraform-command
        vars: { TF_COMMAND: "destroy -auto-approve", TF_CMD_DIR: "{{.WORKSPACE_DIR}}" }

  terraform-init:
    desc: Initialize terraform workspace
    aliases: ["init"]
    dir: "{{.WORKSPACE_DIR}}"
    cmds:
      - task: install-terraform
      - './make_backend_tf.sh'
      - touch main.tf
      - task: terraform-command
        vars: { TF_COMMAND: "init -upgrade", TF_CMD_DIR: "{{.WORKSPACE_DIR}}" }

  terraform-plan:
    desc: Rebuild and run "terraform plan" in "{{.WORKSPACE_DIR}}"
    aliases: ["plan"]
    cmds:
      - task: setup-terraform
      - task: terraform-command
        vars: { TF_COMMAND: "plan", TF_CMD_DIR: "{{.WORKSPACE_DIR}}" }

  setup-terraform:
    desc: Setup env and tools
    aliases: ["setup-tf", "tf-setup", "terraform-setup"]
    cmds:
      - task: terraform-build
      - task: terraform-init

  workspace:
    desc: Setup workspace for terraform-provider-opslevel & opslevel-go development
    cmds:
      - task: go:workspace

  ########################################
  # internal (not directly called) tasks #
  ########################################

  brew-install-jq:
    internal: true
    platforms: [darwin]
    cmds: ["which jq > /dev/null || brew install jq"]
    preconditions:
      - sh: 'which brew'
        msg: '"brew" needed to install "jq"- see https://brew.sh'

  install-terraform:
    internal: true
    platforms: [darwin]
    cmds:
      - echo "Installing terraform..."
      - which terraform > /dev/null || brew tap hashicorp/tap && brew install hashicorp/tap/terraform
      - echo -e "\nSuccess! 'terraform' installed."
    preconditions:
      - sh: 'which brew'
        msg: '"brew" needed to install terraform - see https://brew.sh'

  terraform-command:
    internal: true
    cmds: ["terraform -chdir={{.TF_CMD_DIR}} {{.TF_COMMAND}} {{.CLI_ARGS}}"]
    requires:
      vars: [TF_COMMAND, TF_CMD_DIR]
    preconditions:
      - sh: 'which terraform'
        msg: '"terraform" needed - run "brew install terraform"'

  terraform-format-check:
    internal: true
    desc: Run terraform format
    cmds:
      - cmd: echo "Listing all terraform files that need formatting..."
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -check", TF_CMD_DIR: "{{.ROOT_DIR}}" }

  terraform-format-fix:
    internal: true
    desc: Run terraform format
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -write=true", TF_CMD_DIR: "{{.ROOT_DIR}}" }

  terraform-validate:
    internal: true
    desc: Run "terraform validate" in root directory
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "validate", TF_CMD_DIR: "{{.ROOT_DIR}}" }
