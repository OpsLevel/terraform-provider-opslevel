# https://taskfile.dev/

version: '3'

vars:
  # 'VERSION_DYNAMIC' needs to run in this scope before tasks begin
  VERSION_DYNAMIC:
    sh: echo "$(git describe --tags --abbrev=0 | tr -d 'v')$(date +%s)"

tasks:

  apply:
    desc: Run "terraform apply"
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "apply", TF_CMD_DIR: "{{.TASKFILE_DIR}}" }

  build:
    desc: Build terraform
    platforms: [darwin]
    vars:
      BINARY: terraform-provider-opslevel_{{.VERSION_DYNAMIC}}
      BINARY_PATH_BEFORE_VERSION: "${HOME}/.terraform.d/plugins/registry.terraform.io/opslevel/opslevel"
      OS_ARCH:
        sh: echo $(go env GOOS)_$(go env GOARCH)
      VERSION_FROM_BINARY:
        sh: echo {{.BINARY}} | cut -d '_' -f 2
    cmds:
      - go build -o {{.BINARY}} || exit 1
      - chmod +x {{.BINARY}}
      - mkdir -p {{.BINARY_PATH_BEFORE_VERSION}}/{{.VERSION_FROM_BINARY}}/{{.OS_ARCH}}
      - mv {{.BINARY}} {{.BINARY_PATH_BEFORE_VERSION}}/{{.VERSION_FROM_BINARY}}/{{.OS_ARCH}}
      - cmd: echo "Built terraform provider at:"
        silent: true
      - cmd: echo -e "  {{.BINARY_PATH_BEFORE_VERSION}}/{{.VERSION_FROM_BINARY}}/{{.OS_ARCH}}/{{.BINARY}}"
        silent: true

  clean:
    desc: Clean up terraform files from "workspace"
    prompt: Remove '*.tf' files from 'workspace' directory?
    cmds:
      - cmd: rm *.tf *.tfstate
        ignore_error: true

  destroy:
    desc: Run "terraform destroy" in "workspace"
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "destroy", TF_CMD_DIR: "{{.TASKFILE_DIR}}" }

  init:
    desc: Run "terraform init" in "workspace"
    env:
      OPSLEVEL_TERRAFORM_SOURCE_VERSION: "0.8.7"
    cmds:
      - './make_backend_tf.sh'
      - touch main.tf
      - terraform init -upgrade
    preconditions:
      - sh: 'which terraform'
        msg: '"terraform" needed - run "brew install terraform"'

  lint:
    desc: Validate and check format of terraform files in current directory
    cmds:
      - task: validate
      - task: format

  lintfix:
    desc: Format terraform files in current directory
    cmds:
      - task: format-fix

  plan:
    desc: Run "terraform plan" in "workspace"
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "plan", TF_CMD_DIR: "{{.TASKFILE_DIR}}" }

  setup:
    desc: Build and initialize terraform workspace
    cmds:
      - task: install-terraform
      - task: build
      - task: init

  ########################################
  # internal (not directly called) tasks #
  ########################################

  format:
    internal: true
    desc: Run terraform format
    cmds:
      - cmd: echo "Listing all terraform files that need formatting..."
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -check", TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  format-fix:
    internal: true
    desc: Run terraform format
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -write=true", TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  install-terraform:
    internal: true
    aliases: [get]
    cmds:
      - echo "Installing terraform..."
      - task: install-terraform-mac-os
      - echo -e "\nSuccess! 'terraform' installed."

  install-terraform-mac-os:
    internal: true
    platforms: [darwin]
    cmds:
      - brew tap hashicorp/tap
      - brew install hashicorp/tap/terraform
    preconditions:
      - sh: 'which brew'
        msg: '"brew" needed to install terraform - see https://brew.sh'

  terraform-command:
    internal: true
    cmds: ["terraform -chdir={{.TF_CMD_DIR}} {{.TF_COMMAND}} {{.CLI_ARGS}}"]
    requires:
      vars: [TF_COMMAND, TF_CMD_DIR]
    preconditions:
      - sh: 'which terraform'
        msg: '"terraform" needed - run "brew install terraform"'

  validate:
    internal: true
    desc: Run "terraform validate" in current directory
    dir: '{{.USER_WORKING_DIR}}'
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "validate", TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }
